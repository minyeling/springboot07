<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="school.minyeling.dao.ClassMapper">
  <resultMap id="BaseResultMap" type="school.minyeling.domain.Class">
    <result column="classid" jdbcType="INTEGER" property="classid" />
    <result column="membernum" jdbcType="INTEGER" property="membernum" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="school.minyeling.domain.ClassWithBLOBs">
    <result column="classname" jdbcType="LONGVARCHAR" property="classname" />
    <result column="major" jdbcType="LONGVARCHAR" property="major" />
    <result column="instructor" jdbcType="LONGVARCHAR" property="instructor" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    classid, membernum
  </sql>
  <sql id="Blob_Column_List">
    classname, major, instructor
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="school.minyeling.domain.ClassExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="school.minyeling.domain.ClassExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="school.minyeling.domain.ClassExample">
    delete from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="school.minyeling.domain.ClassWithBLOBs">
    insert into class (classid, membernum, classname, 
      major, instructor)
    values (#{classid,jdbcType=INTEGER}, #{membernum,jdbcType=INTEGER}, #{classname,jdbcType=LONGVARCHAR}, 
      #{major,jdbcType=LONGVARCHAR}, #{instructor,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="school.minyeling.domain.ClassWithBLOBs">
    insert into class
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classid != null">
        classid,
      </if>
      <if test="membernum != null">
        membernum,
      </if>
      <if test="classname != null">
        classname,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="instructor != null">
        instructor,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classid != null">
        #{classid,jdbcType=INTEGER},
      </if>
      <if test="membernum != null">
        #{membernum,jdbcType=INTEGER},
      </if>
      <if test="classname != null">
        #{classname,jdbcType=LONGVARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=LONGVARCHAR},
      </if>
      <if test="instructor != null">
        #{instructor,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="school.minyeling.domain.ClassExample" resultType="java.lang.Long">
    select count(*) from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update class
    <set>
      <if test="record.classid != null">
        classid = #{record.classid,jdbcType=INTEGER},
      </if>
      <if test="record.membernum != null">
        membernum = #{record.membernum,jdbcType=INTEGER},
      </if>
      <if test="record.classname != null">
        classname = #{record.classname,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.instructor != null">
        instructor = #{record.instructor,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update class
    set classid = #{record.classid,jdbcType=INTEGER},
      membernum = #{record.membernum,jdbcType=INTEGER},
      classname = #{record.classname,jdbcType=LONGVARCHAR},
      major = #{record.major,jdbcType=LONGVARCHAR},
      instructor = #{record.instructor,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update class
    set classid = #{record.classid,jdbcType=INTEGER},
      membernum = #{record.membernum,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>