<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="school.minyeling.dao.CourseMapper">
  <resultMap id="BaseResultMap" type="school.minyeling.domain.Course">
    <id column="id" jdbcType="INTEGER" property="id" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="school.minyeling.domain.Course">
    <result column="object" jdbcType="LONGVARCHAR" property="object" />
    <result column="teacher" jdbcType="LONGVARCHAR" property="teacher" />
    <result column="coursetime" jdbcType="LONGVARCHAR" property="coursetime" />
    <result column="courseaddress" jdbcType="LONGVARCHAR" property="courseaddress" />
    <result column="period" jdbcType="LONGVARCHAR" property="period" />
    <result column="credit" jdbcType="LONGVARCHAR" property="credit" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id
  </sql>
  <sql id="Blob_Column_List">
    object, teacher, coursetime, courseaddress, period, credit
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="school.minyeling.domain.CourseExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="school.minyeling.domain.CourseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from course
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from course
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="school.minyeling.domain.CourseExample">
    delete from course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="school.minyeling.domain.Course">
    insert into course (id, object, teacher, 
      coursetime, courseaddress, period, 
      credit)
    values (#{id,jdbcType=INTEGER}, #{object,jdbcType=LONGVARCHAR}, #{teacher,jdbcType=LONGVARCHAR}, 
      #{coursetime,jdbcType=LONGVARCHAR}, #{courseaddress,jdbcType=LONGVARCHAR}, #{period,jdbcType=LONGVARCHAR}, 
      #{credit,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="school.minyeling.domain.Course">
    insert into course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="object != null">
        object,
      </if>
      <if test="teacher != null">
        teacher,
      </if>
      <if test="coursetime != null">
        coursetime,
      </if>
      <if test="courseaddress != null">
        courseaddress,
      </if>
      <if test="period != null">
        period,
      </if>
      <if test="credit != null">
        credit,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="object != null">
        #{object,jdbcType=LONGVARCHAR},
      </if>
      <if test="teacher != null">
        #{teacher,jdbcType=LONGVARCHAR},
      </if>
      <if test="coursetime != null">
        #{coursetime,jdbcType=LONGVARCHAR},
      </if>
      <if test="courseaddress != null">
        #{courseaddress,jdbcType=LONGVARCHAR},
      </if>
      <if test="period != null">
        #{period,jdbcType=LONGVARCHAR},
      </if>
      <if test="credit != null">
        #{credit,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="school.minyeling.domain.CourseExample" resultType="java.lang.Long">
    select count(*) from course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update course
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.object != null">
        object = #{record.object,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.teacher != null">
        teacher = #{record.teacher,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.coursetime != null">
        coursetime = #{record.coursetime,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.courseaddress != null">
        courseaddress = #{record.courseaddress,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.period != null">
        period = #{record.period,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.credit != null">
        credit = #{record.credit,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update course
    set id = #{record.id,jdbcType=INTEGER},
      object = #{record.object,jdbcType=LONGVARCHAR},
      teacher = #{record.teacher,jdbcType=LONGVARCHAR},
      coursetime = #{record.coursetime,jdbcType=LONGVARCHAR},
      courseaddress = #{record.courseaddress,jdbcType=LONGVARCHAR},
      period = #{record.period,jdbcType=LONGVARCHAR},
      credit = #{record.credit,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update course
    set id = #{record.id,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="school.minyeling.domain.Course">
    update course
    <set>
      <if test="object != null">
        object = #{object,jdbcType=LONGVARCHAR},
      </if>
      <if test="teacher != null">
        teacher = #{teacher,jdbcType=LONGVARCHAR},
      </if>
      <if test="coursetime != null">
        coursetime = #{coursetime,jdbcType=LONGVARCHAR},
      </if>
      <if test="courseaddress != null">
        courseaddress = #{courseaddress,jdbcType=LONGVARCHAR},
      </if>
      <if test="period != null">
        period = #{period,jdbcType=LONGVARCHAR},
      </if>
      <if test="credit != null">
        credit = #{credit,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="school.minyeling.domain.Course">
    update course
    set object = #{object,jdbcType=LONGVARCHAR},
      teacher = #{teacher,jdbcType=LONGVARCHAR},
      coursetime = #{coursetime,jdbcType=LONGVARCHAR},
      courseaddress = #{courseaddress,jdbcType=LONGVARCHAR},
      period = #{period,jdbcType=LONGVARCHAR},
      credit = #{credit,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>