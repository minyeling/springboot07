<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="school.minyeling.dao.FeeMapper">
  <resultMap id="BaseResultMap" type="school.minyeling.domain.Fee">
    <result column="id" jdbcType="BIGINT" property="id" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="school.minyeling.domain.Fee">
    <result column="name" jdbcType="LONGVARCHAR" property="name" />
    <result column="banji" jdbcType="LONGVARCHAR" property="banji" />
    <result column="major" jdbcType="LONGVARCHAR" property="major" />
    <result column="term" jdbcType="LONGVARCHAR" property="term" />
    <result column="fee" jdbcType="LONGVARCHAR" property="fee" />
    <result column="arrearage" jdbcType="LONGVARCHAR" property="arrearage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id
  </sql>
  <sql id="Blob_Column_List">
    name, banji, major, term, fee, arrearage
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="school.minyeling.domain.FeeExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="school.minyeling.domain.FeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="school.minyeling.domain.FeeExample">
    delete from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="school.minyeling.domain.Fee">
    insert into fee (id, name, banji, 
      major, term, fee, 
      arrearage)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=LONGVARCHAR}, #{banji,jdbcType=LONGVARCHAR}, 
      #{major,jdbcType=LONGVARCHAR}, #{term,jdbcType=LONGVARCHAR}, #{fee,jdbcType=LONGVARCHAR}, 
      #{arrearage,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="school.minyeling.domain.Fee">
    insert into fee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="banji != null">
        banji,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="term != null">
        term,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="arrearage != null">
        arrearage,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=LONGVARCHAR},
      </if>
      <if test="banji != null">
        #{banji,jdbcType=LONGVARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=LONGVARCHAR},
      </if>
      <if test="term != null">
        #{term,jdbcType=LONGVARCHAR},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=LONGVARCHAR},
      </if>
      <if test="arrearage != null">
        #{arrearage,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="school.minyeling.domain.FeeExample" resultType="java.lang.Long">
    select count(*) from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update fee
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.banji != null">
        banji = #{record.banji,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.term != null">
        term = #{record.term,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.fee != null">
        fee = #{record.fee,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.arrearage != null">
        arrearage = #{record.arrearage,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update fee
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=LONGVARCHAR},
      banji = #{record.banji,jdbcType=LONGVARCHAR},
      major = #{record.major,jdbcType=LONGVARCHAR},
      term = #{record.term,jdbcType=LONGVARCHAR},
      fee = #{record.fee,jdbcType=LONGVARCHAR},
      arrearage = #{record.arrearage,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fee
    set id = #{record.id,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>