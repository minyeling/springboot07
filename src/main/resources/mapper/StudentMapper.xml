<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="school.minyeling.dao.StudentMapper">
  <resultMap id="BaseResultMap" type="school.minyeling.domain.Student">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="banji" jdbcType="INTEGER" property="banji" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="school.minyeling.domain.StudentWithBLOBs">
    <result column="name" jdbcType="LONGVARCHAR" property="name" />
    <result column="sex" jdbcType="LONGVARCHAR" property="sex" />
    <result column="age" jdbcType="LONGVARCHAR" property="age" />
    <result column="major" jdbcType="LONGVARCHAR" property="major" />
    <result column="address" jdbcType="LONGVARCHAR" property="address" />
    <result column="phonenumber" jdbcType="LONGVARCHAR" property="phonenumber" />
    <result column="beizhu" jdbcType="LONGVARCHAR" property="beizhu" />
    <result column="password" jdbcType="LONGVARCHAR" property="password" />
    <result column="dormnum" jdbcType="LONGVARCHAR" property="dormnum" />
    <result column="bednum" jdbcType="LONGVARCHAR" property="bednum" />
    <result column="award" jdbcType="LONGVARCHAR" property="award" />
    <result column="punish" jdbcType="LONGVARCHAR" property="punish" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, banji
  </sql>
  <sql id="Blob_Column_List">
    name, sex, age, major, address, phonenumber, beizhu, password, dormnum, bednum, award, 
    punish
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="school.minyeling.domain.StudentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="school.minyeling.domain.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from student
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from student
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="school.minyeling.domain.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="school.minyeling.domain.StudentWithBLOBs">
    insert into student (id, banji, name, 
      sex, age, major, 
      address, phonenumber, beizhu, 
      password, dormnum, bednum, 
      award, punish)
    values (#{id,jdbcType=BIGINT}, #{banji,jdbcType=INTEGER}, #{name,jdbcType=LONGVARCHAR}, 
      #{sex,jdbcType=LONGVARCHAR}, #{age,jdbcType=LONGVARCHAR}, #{major,jdbcType=LONGVARCHAR}, 
      #{address,jdbcType=LONGVARCHAR}, #{phonenumber,jdbcType=LONGVARCHAR}, #{beizhu,jdbcType=LONGVARCHAR}, 
      #{password,jdbcType=LONGVARCHAR}, #{dormnum,jdbcType=LONGVARCHAR}, #{bednum,jdbcType=LONGVARCHAR}, 
      #{award,jdbcType=LONGVARCHAR}, #{punish,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="school.minyeling.domain.StudentWithBLOBs">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="banji != null">
        banji,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="phonenumber != null">
        phonenumber,
      </if>
      <if test="beizhu != null">
        beizhu,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="dormnum != null">
        dormnum,
      </if>
      <if test="bednum != null">
        bednum,
      </if>
      <if test="award != null">
        award,
      </if>
      <if test="punish != null">
        punish,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="banji != null">
        #{banji,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=LONGVARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=LONGVARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=LONGVARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=LONGVARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=LONGVARCHAR},
      </if>
      <if test="phonenumber != null">
        #{phonenumber,jdbcType=LONGVARCHAR},
      </if>
      <if test="beizhu != null">
        #{beizhu,jdbcType=LONGVARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=LONGVARCHAR},
      </if>
      <if test="dormnum != null">
        #{dormnum,jdbcType=LONGVARCHAR},
      </if>
      <if test="bednum != null">
        #{bednum,jdbcType=LONGVARCHAR},
      </if>
      <if test="award != null">
        #{award,jdbcType=LONGVARCHAR},
      </if>
      <if test="punish != null">
        #{punish,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="school.minyeling.domain.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.banji != null">
        banji = #{record.banji,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.phonenumber != null">
        phonenumber = #{record.phonenumber,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.beizhu != null">
        beizhu = #{record.beizhu,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.dormnum != null">
        dormnum = #{record.dormnum,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.bednum != null">
        bednum = #{record.bednum,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.award != null">
        award = #{record.award,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.punish != null">
        punish = #{record.punish,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update student
    set id = #{record.id,jdbcType=BIGINT},
      banji = #{record.banji,jdbcType=INTEGER},
      name = #{record.name,jdbcType=LONGVARCHAR},
      sex = #{record.sex,jdbcType=LONGVARCHAR},
      age = #{record.age,jdbcType=LONGVARCHAR},
      major = #{record.major,jdbcType=LONGVARCHAR},
      address = #{record.address,jdbcType=LONGVARCHAR},
      phonenumber = #{record.phonenumber,jdbcType=LONGVARCHAR},
      beizhu = #{record.beizhu,jdbcType=LONGVARCHAR},
      password = #{record.password,jdbcType=LONGVARCHAR},
      dormnum = #{record.dormnum,jdbcType=LONGVARCHAR},
      bednum = #{record.bednum,jdbcType=LONGVARCHAR},
      award = #{record.award,jdbcType=LONGVARCHAR},
      punish = #{record.punish,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set id = #{record.id,jdbcType=BIGINT},
      banji = #{record.banji,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="school.minyeling.domain.StudentWithBLOBs">
    update student
    <set>
      <if test="banji != null">
        banji = #{banji,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=LONGVARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=LONGVARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=LONGVARCHAR},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=LONGVARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=LONGVARCHAR},
      </if>
      <if test="phonenumber != null">
        phonenumber = #{phonenumber,jdbcType=LONGVARCHAR},
      </if>
      <if test="beizhu != null">
        beizhu = #{beizhu,jdbcType=LONGVARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=LONGVARCHAR},
      </if>
      <if test="dormnum != null">
        dormnum = #{dormnum,jdbcType=LONGVARCHAR},
      </if>
      <if test="bednum != null">
        bednum = #{bednum,jdbcType=LONGVARCHAR},
      </if>
      <if test="award != null">
        award = #{award,jdbcType=LONGVARCHAR},
      </if>
      <if test="punish != null">
        punish = #{punish,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="school.minyeling.domain.StudentWithBLOBs">
    update student
    set banji = #{banji,jdbcType=INTEGER},
      name = #{name,jdbcType=LONGVARCHAR},
      sex = #{sex,jdbcType=LONGVARCHAR},
      age = #{age,jdbcType=LONGVARCHAR},
      major = #{major,jdbcType=LONGVARCHAR},
      address = #{address,jdbcType=LONGVARCHAR},
      phonenumber = #{phonenumber,jdbcType=LONGVARCHAR},
      beizhu = #{beizhu,jdbcType=LONGVARCHAR},
      password = #{password,jdbcType=LONGVARCHAR},
      dormnum = #{dormnum,jdbcType=LONGVARCHAR},
      bednum = #{bednum,jdbcType=LONGVARCHAR},
      award = #{award,jdbcType=LONGVARCHAR},
      punish = #{punish,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="school.minyeling.domain.Student">
    update student
    set banji = #{banji,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>